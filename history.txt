so, 
the update for 3rd july 2023 is: 
the game is working okay in UDP, We are using UDP alone, and no extra toppings over it.
the problem seems to be in showing the timeline in the client display unit, the problem maybe in sending data one by one,
this has to changed.
more over we need to check if the game is responsive to the slightest commands of the algorithm. I know this may be difficult, but we need to make
it most responsive in any scenario.
now since the game is running on UDP, we need to make another logic for lobby_server now since socket transferring is obsolete now.
But instead of sending the socket and recreating it, we can just send the client ip address and port to the game server.

make the game production ready, add the database, prepare the leaderboard, we launch now.
-----------------------------------------------------------------------------------------------------------------------------
11th july 2023:

so working on lobby server, refining it as much as i can.
added the variable port thing for game servers
add the select functionality to make the server robust. so tha it doesn't lag anywhere.
make the lobby listen workable, and then we are done with the server.
-------------------------------------------------------------------------------------------------------------------------------
14 july 2023:

so now client display unit gets started by client_v1, now to add the connection of client_v2 with server_v1, some authentication is required.
the point where we are listening for the client_v1 in server_v3, at the same point we will be listening to client_v2, so for that we need to add some authenications,
so that we can differentiate between the two clients.

The process is simple: server_v3 is accepting the connection from client_v1, sends him an id, that id is included in command line arguements of client_v2
now client_v2 will convert it to a code starting from 1 and send it to the server, this way the server will know who is requesting.
--------------------------------------------------------------------------------------------------------------------------------
15th july 2023:

-send if the game is over or not from the server end. also check how to end all the connections.
-make server reusable.
left working on the server making it reusable,.....
so now we will be working on it
----------------------------------------------------------------------------------------------------------------------------------
 19th july 2023:
 now the remaining work is:
 authentication of the network.
 checking how many windows of client terminal and display unit is open
 now start preparing for the launch of the game, we are almost done here:



 stack:
 client is sending id and password at the time of connection(TCP) to the lobby server
 sending the combination of token and port the first time game server contacts the lobby server
 sending the new token only everytime the server gets a new game;
 sending the client credential to the game server in transfer socket function
 

 ----------------------------------------------------------------------------------------------------------------------------------
 the new game token sending is not happening...
 ------------------------------------------------------------------------------------------------------------------------------
 24 july 2023
 solved the problem of sending to the client that the game is over.
 the problem was:
 as soon as the ship gets dead, we were not sending anything to that ship,  so that ship would never know that he is dead, so i am sending to every ship now
 irrespective of if it is dead or not.
 i am also running the server for 4 more frames after the game is over, to incur any packet loss in UDP, so that everyone knows safely that the game is over.,
 
 the only thing left is to check with the multiple servers. and add a policy so that a client can get reconnected in case of client gets out, only possible with 
 the client display unit, and not with the algorithm part of the client.
 -------------------------------------------------------------------------------------------------------------------------------
 25 july 2023
 a little bit change in server_v3, put the time limit on each game, the game ends after 10 minutes of time, or when all the clients have disconnected(this may be not
 easy to implement, but we will try to do it maybe later) for now after 10 minutes of time, the game fucking ends.....
 done the first part.
 
 Now i will try to explore the database options...
 I have tried to connect the code with azure SQL but all the efforts went in vain. Now we go for SQLite since this is the only viable and sped up option here
 ----------------------------------------------------------------------------------------------------------------------------------------
 SQL schema for the game
 ------------------------------------------
 the player 1 is not sending the navigation data to the server in one attempt;
 i checked if the client server communication is okay or not, in one try, it was okay and the server should respond with proper frame rate
 the issue seems to be with the client_v2 this will be checked next after i am done with the navigation issue.
 ------------------------------------------------------------------------------------
 the issue seems to be the packet missing, the missing is not small, its about 100 packets missing while sending to the client display unit which is running 
 in the same computer as the server. check for the clients that what is the missing packet, and then solve this issue.
 this is the biggest issue. the problem does not seem to be with the client terminal.
 the problem is missing packets that the server is sending to the client display unit. this shit has to be solved. by tomorrow
 -----------------------------------------------------------------------
 
 the new concept is as follows:
 every game server will have 3 ports:
 1. for sending data to the client terminal. (socket listen will be used for this.port=8081)
 2. for sending data to the client display unit.( having the port=8082)
 3. for recving data from the client terminal unit.(having the port=8083)

 recving will run in the same thread as that of game loop, while sending will run in 2 threads one for each because sending is taking ample of time
 and we need to make sure no one is left in getting the new and updted data specially the client display unit which is frame intensive.
 this concept seems to be okay and working, we code it tomorrow, and test it tomorrow's night. if this is successfull, i dont think anything is left
 we should start working on the database and the website for the game.
 PS: i didn't do anything with the game, just printed some texts and it started workin fine, i dont know why does this happen
 for the client display unit, i am not using select as to check whether the socket is ready to send the data or not. I am just sending it.
 beacuase the missing packet range was too high to be taken causually.
 ------------------------------------------------------------------------------------------------------------------------------------
 now going to make the first function which will send data to the client terminal
 remeber to close the additionally added sockets...
 -------------------------------------------------------------------------------------------------------
 7th august 23:
 congratulations!
 the new logic seems to be working fine. there is no lag in the game..
 there is something to write in the blog:
 the client in UDP cannot recv anything first, the server will always send something first. this seems to be the rule.
 so the server is reproducible as well, we just have to work the port play, to assign the required the ports to each part of the game server
 this can be done tomorrow.
 start to work on the database and the website, we are launching it next week. make a library as well, start writing blogs about the game
 make videos tutorials on how to play the game and organize a championship based on the game.
 also think about making this game multilingual, which is very easy.
 just convert the entire class to a string format and read that data in python. since the client is in python the server will always be in c++
 so we can do this./
 GOOD NIGHT!
 ------------------------------------------------------------------------------------------------------------------------------
 the issue:
 client_v2_new is not accepting the frames from the server when inside the while loop. after the while loop it is accepting the message, so there
 is no issue of connectivity issue.
 to check if the VM can even take the load of sending frames, i am writing a pseudo program to check.
 sad to see i have to go all through this again.
 -------------------------------------------------------------------------------------------------------------------------------
 8th august 23:
 aws worked.
 now the issues are:
 previous frames must be discarded at once. if you can make some prediction algorithm.
 there is something wrong in sending startup data, so i will recommend to use tcp for that or keep a ack mechanism:
 
 creating a ack mechanism for important messages:
 every message is important except what is sent in the game loop. we are not securing the game loop messages. only those messages which
 are outside it.
 ----------------------------------------------------
 if ack does not come in 1second then resending the message is necessary.
 don't move forward if no message comes up(for the client) for server you can move forward by discarding that client if it does not send message in 2 secs
 
 lobby server is working over tcp so no problem over there the only problem will be in the server_v3..check that
 -------------------------------------------------------------------------------------------------------------------------------
15th august 2023
so today the game is 90% perfectly running, 
check for:
1. with multiple game servers, manage to send the correct port;
2. don't use previous packets ever in the client, server and display unit change it.
3. create a library for the user. check for security if you can.

and now to take it to production some preventions have to be done as well.
---------------------------------------------------------------------------------------------------------------------------------
so yes. the problem is in college wifi and my hotspot, which is filtering packets that we are sending.
because i am sending the packets, from the server, the wireshark is not showing that any packets are received. that means the problem is in the network
the network is shit..
the last check will be at my home wifi, which we will be using.
---------------------------------------------------------------------------------------------------------------------------------
i have checked the game at my home, it was working fine so the condition for the game to work is that the wifi should be unrestricted, and the uploading
speed should be atleast 10 mbps, then only the game will fucking work. thats all from my side.
 i have made client connection with game server more agile, now the client gets to choose if he wants to open the unit or not.
 now lets add the game result in the database, this we can also do later when the game is ready to be thrown in the wild.
 one last change that i would like to check if tcp is blocking udp data, cause if this is the reason then something is wrong. this is i am going to check
 now
 -----------------------------------------------------------------------------------------------------
 
 so now i will start making the LAN version of the game for people to play:
 the following things will be required to add in the following process:
 1. client_v1: add the client library version, and make the terminal user friendly and better;
 2. client_v2: add the music in the client, display the username of people
 for LAN version since there is no database... we need to ask for the name from the people, so for that we don't need the database section.
 but now we are closer to this version..or no? some things have to be changed in the offline version of the game. 
 this we will make later on, we will now first make the online version:
 so to make the online version following things have to be done:
 1. for client_v1 add the version of the library, prepare a library for the user, that does not have SFML. and only the required stuff;
 2. for client_v2 add the version of the exe, and remove some things. and fix some, add the music and then we are done.
 for server just add the metrics that can be used by you.
 also make a display unit that can be connected in case anyone just wants to see the game..
 over and out.
 